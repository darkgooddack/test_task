import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.responses import RedirectResponse
from app.schemas import ProductRequest, ProductResponse
from app.crud import get_product_data
from app.db import get_db
from app.crud import create_product

logging.basicConfig(level=logging.INFO)

app = FastAPI()

scheduler = AsyncIOScheduler()

scheduler.start()

@app.get("/")
async def redirect_to_docs():
    return RedirectResponse(url="/docs")

@app.post("/api/v1/products", response_model=ProductResponse)
async def create_product_endpoint(request: ProductRequest, db: AsyncSession = Depends(get_db)):
    try:
        logging.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {request.artikul}")
        product_data = await get_product_data(request.artikul)

        logging.info(f"üì° –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ–ª—É—á–µ–Ω—ã: {product_data}")

        product_data['artikul'] = request.artikul

        product = await create_product(
            db=db,
            artikul=request.artikul,
            name=product_data["name"],
            price=product_data["price"],
            rating=product_data["rating"],
            stock_count=product_data["stock_count"]
        )

        logging.info(f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {product}")

        return ProductResponse(**product_data)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {request.artikul}: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


async def collect_product_data(artikul: str):
    """
    –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with get_db() as db:
        logging.info(f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {artikul}")
        try:
            product_data = await get_product_data(artikul)

            logging.info(f"üì° –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {artikul} –ø–æ–ª—É—á–µ–Ω—ã: {product_data}")

            await create_product(
                db=db,
                artikul=artikul,
                name=product_data["name"],
                price=product_data["price"],
                rating=product_data["rating"],
                stock_count=product_data["stock_count"]
            )

            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {artikul} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as exc:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {artikul}: {exc}")
            raise exc
        finally:
            await db.close


@app.get("/api/v1/subscribe/{artikul}")
async def subscribe_product(artikul: str):
    existing_jobs = scheduler.get_jobs()
    if not any(job.id == artikul for job in existing_jobs):
        scheduler.add_job(
            collect_product_data,
            IntervalTrigger(minutes=1),
            args=[artikul],  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª
            id=artikul,
            replace_existing=True,
            max_instances=1
        )
        logging.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {artikul} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return {"message": f"Subscribed to product {artikul} updates every 1 minute"}
    else:
        logging.info(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ {artikul} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return {"message": f"Already subscribed to product {artikul}"}


@app.on_event("startup")
async def startup_event():
    if not scheduler.running:
        scheduler.start()
        logging.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")