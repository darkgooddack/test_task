from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models import Product
import httpx
from typing import Dict, Any

import httpx
from typing import Dict, Any
import logging

async def create_product(db: AsyncSession, name: str, artikul: str, price: float, rating: float, stock_count: int):
    new_product = Product(
        name=name,
        artikul=artikul,
        price=price,
        rating=rating,
        stock_count=stock_count
    )
    db.add(new_product)
    await db.commit()
    await db.refresh(new_product)
    return new_product


async def get_product_data(artikul: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Å Wildberries –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.

    :param artikul: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö).
    """

    url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={artikul}"

    async with httpx.AsyncClient() as client:
        try:
            logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Wildberries –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {artikul}")
            response = await client.get(url)
            logging.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —Å –∫–æ–¥–æ–º: {response.status_code}")

            if response.status_code != 200:
                raise ValueError(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {artikul}: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")

            data = response.json()
            #logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
            logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")

            products = data.get("data", {}).get("products", [])
            if not products:
                raise ValueError(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {artikul} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API")

            product_data = products[0]
            return {
                "name": product_data.get("name"),
                "price": product_data.get("priceU", 0) / 100,
                "rating": product_data.get("rating", 0),
                "stock_count": product_data.get("quantity", 0)
            }


        except httpx.RequestError as exc:
            logging.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Wildberries: {exc}")
            raise ValueError(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Wildberries: {exc}")


        except Exception as exc:
            logging.error(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
            raise ValueError(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")